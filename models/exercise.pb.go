// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: exercise.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration for exercise categories.
type ExerciseCategory int32

const (
	ExerciseCategory_EXERCISE_CATEGORY_UNSPECIFIED ExerciseCategory = 0
	ExerciseCategory_BARBELL                       ExerciseCategory = 1
	ExerciseCategory_DUMBBELL                      ExerciseCategory = 2
	ExerciseCategory_MACHINE                       ExerciseCategory = 3
	ExerciseCategory_WEIGHTED_BODY_WEIGHT          ExerciseCategory = 4
	ExerciseCategory_ASSISTED_BODY_WEIGHT          ExerciseCategory = 5
	ExerciseCategory_REPS_ONLY                     ExerciseCategory = 6 // Plyometric
	ExerciseCategory_DURATION                      ExerciseCategory = 7 // Isometric
	ExerciseCategory_CARDIO                        ExerciseCategory = 8
)

// Enum value maps for ExerciseCategory.
var (
	ExerciseCategory_name = map[int32]string{
		0: "EXERCISE_CATEGORY_UNSPECIFIED",
		1: "BARBELL",
		2: "DUMBBELL",
		3: "MACHINE",
		4: "WEIGHTED_BODY_WEIGHT",
		5: "ASSISTED_BODY_WEIGHT",
		6: "REPS_ONLY",
		7: "DURATION",
		8: "CARDIO",
	}
	ExerciseCategory_value = map[string]int32{
		"EXERCISE_CATEGORY_UNSPECIFIED": 0,
		"BARBELL":                       1,
		"DUMBBELL":                      2,
		"MACHINE":                       3,
		"WEIGHTED_BODY_WEIGHT":          4,
		"ASSISTED_BODY_WEIGHT":          5,
		"REPS_ONLY":                     6,
		"DURATION":                      7,
		"CARDIO":                        8,
	}
)

func (x ExerciseCategory) Enum() *ExerciseCategory {
	p := new(ExerciseCategory)
	*p = x
	return p
}

func (x ExerciseCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExerciseCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_exercise_proto_enumTypes[0].Descriptor()
}

func (ExerciseCategory) Type() protoreflect.EnumType {
	return &file_exercise_proto_enumTypes[0]
}

func (x ExerciseCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExerciseCategory.Descriptor instead.
func (ExerciseCategory) EnumDescriptor() ([]byte, []int) {
	return file_exercise_proto_rawDescGZIP(), []int{0}
}

// Represents an exercise entity.
type Exercise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                               // UUID of the exercise.
	Name           string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                           // Name of the exercise.
	MusclesOptions *MusclesOption   `protobuf:"bytes,3,opt,name=muscles_options,json=musclesOptions,proto3" json:"muscles_options,omitempty"` // Primary and secondary muscles used.
	Category       ExerciseCategory `protobuf:"varint,4,opt,name=category,proto3,enum=models.ExerciseCategory" json:"category,omitempty"`     // Enum indicating the category of the exercise.
	Description    string           `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                             // Optional description.
	Instruction    string           `protobuf:"bytes,6,opt,name=instruction,proto3" json:"instruction,omitempty"`                             // Optional instruction.
}

func (x *Exercise) Reset() {
	*x = Exercise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exercise_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exercise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exercise) ProtoMessage() {}

func (x *Exercise) ProtoReflect() protoreflect.Message {
	mi := &file_exercise_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exercise.ProtoReflect.Descriptor instead.
func (*Exercise) Descriptor() ([]byte, []int) {
	return file_exercise_proto_rawDescGZIP(), []int{0}
}

func (x *Exercise) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Exercise) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Exercise) GetMusclesOptions() *MusclesOption {
	if x != nil {
		return x.MusclesOptions
	}
	return nil
}

func (x *Exercise) GetCategory() ExerciseCategory {
	if x != nil {
		return x.Category
	}
	return ExerciseCategory_EXERCISE_CATEGORY_UNSPECIFIED
}

func (x *Exercise) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Exercise) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

// Represents the primary and secondary muscles involved in an exercise.
type MusclesOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryMuscles   []*Muscle `protobuf:"bytes,1,rep,name=primary_muscles,json=primaryMuscles,proto3" json:"primary_muscles,omitempty"`       // List of primary muscles.
	SecondaryMuscles []*Muscle `protobuf:"bytes,2,rep,name=secondary_muscles,json=secondaryMuscles,proto3" json:"secondary_muscles,omitempty"` // List of secondary muscles.
}

func (x *MusclesOption) Reset() {
	*x = MusclesOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exercise_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusclesOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusclesOption) ProtoMessage() {}

func (x *MusclesOption) ProtoReflect() protoreflect.Message {
	mi := &file_exercise_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusclesOption.ProtoReflect.Descriptor instead.
func (*MusclesOption) Descriptor() ([]byte, []int) {
	return file_exercise_proto_rawDescGZIP(), []int{1}
}

func (x *MusclesOption) GetPrimaryMuscles() []*Muscle {
	if x != nil {
		return x.PrimaryMuscles
	}
	return nil
}

func (x *MusclesOption) GetSecondaryMuscles() []*Muscle {
	if x != nil {
		return x.SecondaryMuscles
	}
	return nil
}

// Represents a muscle entity.
type Muscle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // UUID of the muscle.
	Name   string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`     // Name of the muscle.
	Groups []*MuscleGroup `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"` // Muscle groups this muscle belongs to.
}

func (x *Muscle) Reset() {
	*x = Muscle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exercise_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Muscle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Muscle) ProtoMessage() {}

func (x *Muscle) ProtoReflect() protoreflect.Message {
	mi := &file_exercise_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Muscle.ProtoReflect.Descriptor instead.
func (*Muscle) Descriptor() ([]byte, []int) {
	return file_exercise_proto_rawDescGZIP(), []int{2}
}

func (x *Muscle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Muscle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Muscle) GetGroups() []*MuscleGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

// Represents a group of muscles.
type MuscleGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // UUID of the muscle group.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // Name of the muscle group.
}

func (x *MuscleGroup) Reset() {
	*x = MuscleGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exercise_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuscleGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuscleGroup) ProtoMessage() {}

func (x *MuscleGroup) ProtoReflect() protoreflect.Message {
	mi := &file_exercise_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuscleGroup.ProtoReflect.Descriptor instead.
func (*MuscleGroup) Descriptor() ([]byte, []int) {
	return file_exercise_proto_rawDescGZIP(), []int{3}
}

func (x *MuscleGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MuscleGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_exercise_proto protoreflect.FileDescriptor

var file_exercise_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x6d, 0x75, 0x73,
	0x63, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x75, 0x73, 0x63,
	0x6c, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6d, 0x75, 0x73, 0x63, 0x6c,
	0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x6d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x52, 0x0e,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x75, 0x73, 0x63,
	0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x06, 0x4d,
	0x75, 0x73, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x31, 0x0a, 0x0b, 0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0xba, 0x01, 0x0a, 0x10, 0x45, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21,
	0x0a, 0x1d, 0x45, 0x58, 0x45, 0x52, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x52, 0x42, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x55, 0x4d, 0x42, 0x42, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x45, 0x49,
	0x47, 0x48, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x45, 0x44, 0x5f,
	0x42, 0x4f, 0x44, 0x59, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x45, 0x50, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41,
	0x52, 0x44, 0x49, 0x4f, 0x10, 0x08, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_exercise_proto_rawDescOnce sync.Once
	file_exercise_proto_rawDescData = file_exercise_proto_rawDesc
)

func file_exercise_proto_rawDescGZIP() []byte {
	file_exercise_proto_rawDescOnce.Do(func() {
		file_exercise_proto_rawDescData = protoimpl.X.CompressGZIP(file_exercise_proto_rawDescData)
	})
	return file_exercise_proto_rawDescData
}

var file_exercise_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_exercise_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_exercise_proto_goTypes = []interface{}{
	(ExerciseCategory)(0), // 0: models.ExerciseCategory
	(*Exercise)(nil),      // 1: models.Exercise
	(*MusclesOption)(nil), // 2: models.MusclesOption
	(*Muscle)(nil),        // 3: models.Muscle
	(*MuscleGroup)(nil),   // 4: models.MuscleGroup
}
var file_exercise_proto_depIdxs = []int32{
	2, // 0: models.Exercise.muscles_options:type_name -> models.MusclesOption
	0, // 1: models.Exercise.category:type_name -> models.ExerciseCategory
	3, // 2: models.MusclesOption.primary_muscles:type_name -> models.Muscle
	3, // 3: models.MusclesOption.secondary_muscles:type_name -> models.Muscle
	4, // 4: models.Muscle.groups:type_name -> models.MuscleGroup
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_exercise_proto_init() }
func file_exercise_proto_init() {
	if File_exercise_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_exercise_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exercise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exercise_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusclesOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exercise_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Muscle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exercise_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuscleGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_exercise_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_exercise_proto_goTypes,
		DependencyIndexes: file_exercise_proto_depIdxs,
		EnumInfos:         file_exercise_proto_enumTypes,
		MessageInfos:      file_exercise_proto_msgTypes,
	}.Build()
	File_exercise_proto = out.File
	file_exercise_proto_rawDesc = nil
	file_exercise_proto_goTypes = nil
	file_exercise_proto_depIdxs = nil
}
